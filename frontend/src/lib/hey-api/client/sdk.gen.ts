// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client,
} from "@hey-api/client-fetch";
import type {
  GetPipelinesData,
  GetPipelinesResponses,
  RunPipelineData,
  RunPipelineResponses,
  RunPipelineErrors,
  GetPipelineStatusData,
  GetPipelineStatusResponses,
  GetPipelineStatusErrors,
  GetFilteredPipelinesPipelinesFilterGetData,
  GetFilteredPipelinesPipelinesFilterGetResponses,
  GetFilteredPipelinesPipelinesFilterGetErrors,
  GetPresignedUrlData,
  GetPresignedUrlResponses,
  GetPresignedUrlErrors,
  CreateDatasetData,
  CreateDatasetResponses,
  CreateDatasetErrors,
  ExtractDatasetData,
  ExtractDatasetResponses,
  ExtractDatasetErrors,
  GetDatasetColumnsData,
  GetDatasetColumnsResponses,
  GetDatasetColumnsErrors,
  EditDatasetDatasetsDatasetIdEditPutData,
  EditDatasetDatasetsDatasetIdEditPutResponses,
  EditDatasetDatasetsDatasetIdEditPutErrors,
  DeleteDatasetDatasetsDatasetIdDeleteData,
  DeleteDatasetDatasetsDatasetIdDeleteResponses,
  DeleteDatasetDatasetsDatasetIdDeleteErrors,
  GetDatasetsData,
  GetDatasetsResponses,
  GetDatasetInfoData,
  GetDatasetInfoResponses,
  GetDatasetInfoErrors,
  GetUserDatasetsData,
  GetUserDatasetsResponses,
  AuthenticateWithGoogleUsersAuthGooglePostData,
  AuthenticateWithGoogleUsersAuthGooglePostResponses,
  CheckUserRoleAccessUsersRoleCheckPostData,
  CheckUserRoleAccessUsersRoleCheckPostResponses,
  CheckUserRoleAccessUsersRoleCheckPostErrors,
  InitializeEndpointAccessUsersRoleCheckInitGetData,
  InitializeEndpointAccessUsersRoleCheckInitGetResponses,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Get Pipelines Endpoint
 */
export const getPipelines = <ThrowOnError extends boolean = false>(
  options?: Options<GetPipelinesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetPipelinesResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/pipelines",
    ...options,
  });
};

/**
 * Run Pipeline
 */
export const runPipeline = <ThrowOnError extends boolean = false>(
  options: Options<RunPipelineData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    RunPipelineResponses,
    RunPipelineErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/pipelines/run",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Pipeline Status
 */
export const getPipelineStatus = <ThrowOnError extends boolean = false>(
  options: Options<GetPipelineStatusData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetPipelineStatusResponses,
    GetPipelineStatusErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/pipeline/status",
    ...options,
  });
};

/**
 * Get Filtered Pipelines
 */
export const getFilteredPipelinesPipelinesFilterGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetFilteredPipelinesPipelinesFilterGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetFilteredPipelinesPipelinesFilterGetResponses,
    GetFilteredPipelinesPipelinesFilterGetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/pipelines/filter",
    ...options,
  });
};

/**
 * Get Presigned Url
 */
export const getPresignedUrl = <ThrowOnError extends boolean = false>(
  options: Options<GetPresignedUrlData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetPresignedUrlResponses,
    GetPresignedUrlErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/presignedURL",
    ...options,
  });
};

/**
 * Create Dataset
 */
export const createDataset = <ThrowOnError extends boolean = false>(
  options: Options<CreateDatasetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CreateDatasetResponses,
    CreateDatasetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/datasets/create",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Extract Csv
 */
export const extractDataset = <ThrowOnError extends boolean = false>(
  options: Options<ExtractDatasetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    ExtractDatasetResponses,
    ExtractDatasetErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/datasets/extract",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Get Dataset Columns
 */
export const getDatasetColumns = <ThrowOnError extends boolean = false>(
  options: Options<GetDatasetColumnsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetDatasetColumnsResponses,
    GetDatasetColumnsErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/datasets/columns",
    ...options,
  });
};

/**
 * Edit Dataset
 */
export const editDatasetDatasetsDatasetIdEditPut = <
  ThrowOnError extends boolean = false,
>(
  options: Options<EditDatasetDatasetsDatasetIdEditPutData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    EditDatasetDatasetsDatasetIdEditPutResponses,
    EditDatasetDatasetsDatasetIdEditPutErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/datasets/{dataset_id}/edit",
    ...options,
  });
};

/**
 * Delete Dataset
 */
export const deleteDatasetDatasetsDatasetIdDelete = <
  ThrowOnError extends boolean = false,
>(
  options: Options<DeleteDatasetDatasetsDatasetIdDeleteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    DeleteDatasetDatasetsDatasetIdDeleteResponses,
    DeleteDatasetDatasetsDatasetIdDeleteErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/datasets/{dataset_id}",
    ...options,
  });
};

/**
 * Get Datasets
 */
export const getDatasets = <ThrowOnError extends boolean = false>(
  options?: Options<GetDatasetsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetDatasetsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/datasets",
    ...options,
  });
};

/**
 * Get Dataset Info
 */
export const getDatasetInfo = <ThrowOnError extends boolean = false>(
  options: Options<GetDatasetInfoData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    GetDatasetInfoResponses,
    GetDatasetInfoErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/dataset",
    ...options,
  });
};

/**
 * Get User Datasets
 */
export const getUserDatasets = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserDatasetsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserDatasetsResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/user/datasets",
    ...options,
  });
};

/**
 * Authenticate With Google
 * Authenticate user with Google ID token and return backend token.
 * This endpoint is called by NextAuth during the sign-in process.
 */
export const authenticateWithGoogleUsersAuthGooglePost = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    AuthenticateWithGoogleUsersAuthGooglePostData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? _heyApiClient).post<
    AuthenticateWithGoogleUsersAuthGooglePostResponses,
    unknown,
    ThrowOnError
  >({
    url: "/users/auth/google",
    ...options,
  });
};

/**
 * Check User Role Access
 * Check if the current user has access to the requested path based on their role.
 */
export const checkUserRoleAccessUsersRoleCheckPost = <
  ThrowOnError extends boolean = false,
>(
  options: Options<CheckUserRoleAccessUsersRoleCheckPostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    CheckUserRoleAccessUsersRoleCheckPostResponses,
    CheckUserRoleAccessUsersRoleCheckPostErrors,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/users/role-check",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options.headers,
    },
  });
};

/**
 * Initialize Endpoint Access
 * Initialize default endpoint access controls.
 * This endpoint can be called to set up the default access rules.
 */
export const initializeEndpointAccessUsersRoleCheckInitGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<
    InitializeEndpointAccessUsersRoleCheckInitGetData,
    ThrowOnError
  >,
) => {
  return (options?.client ?? _heyApiClient).get<
    InitializeEndpointAccessUsersRoleCheckInitGetResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/users/role-check/init",
    ...options,
  });
};
