openapi: 3.0.4
info:
  title: Agriworks - OpenAPI Spec
  version: 0.0.1
servers:
  - url: http://localhost:8080/api/v1
tags:
  - name: dataset
    description: Operations on datasets
  - name: user
    description: Operations on users
paths:
  /dataset/new:
    post:
      tags:
        - dataset
      summary: Add a new dataset.
      description: Add a new dataset to the store.
      operationId: addDataset
      requestBody:
        description: Create a new dataset
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Dataset'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /dataset/findByTags:
    get:
      tags:
        - dataset
      summary: Finds datasets by tags.
      description: Multiple tags can be provided with comma separated strings.
      operationId: findDatasetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dataset'
        '400':
          description: Invalid tag value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /dataset/{datasetId}:
    get:
      tags:
        - dataset
      summary: Find dataset by ID.
      description: Returns a single dataset.
      operationId: getDatasetById
      parameters:
        - name: datasetId
          in: path
          description: ID of dataset to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dataset'
        '400':
          description: Invalid ID supplied
        '404':
          description: Dataset not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - dataset
      summary: Deletes a dataset.
      description: Delete a dataset.
      operationId: deleteDataset
      parameters:
        - name: datasetId
          in: path
          description: Dataset id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Dataset deleted
        '400':
          description: Invalid dataset value
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /user:
    post:
      tags:
        - user
      summary: Create user.
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name.
      description: Get user detail based on username.
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched.
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /generatePresignedURL:
    get:
      tags:
        - dataset
      summary: Generate a presigned URL for S3 uploading.
      description: Generate a presigned URL to upload a file to S3.
      operationId: generatePresignedUrl
      parameters:
        - name: filename
          in: query 
          description: The name of the file to upload
          required: true
          schema:
            type: string 
      responses:
        '200':
          description: Presigned URL generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  upload_url:
                    type: string
                    format: uri
        '400':
          description: Invalid filename supplied
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"       
  /submit-task:
    post:
      tags:
        - dataset
      summary: Submit a task for execution.
      description: Submit a task to be executed by the cloud function.
      operationId: submitTask
      requestBody:
        description: Task submission request
        content:
          application/json:
            schema:
              type: object
              properties:
                func_name:
                  type: string
                param_values:
                  type: array
                  items:
                    type: string
                param_types:
                  type: array
                  items:
                    type: string
                return_type:
                  type: string
              required:
                - func_name
                - param_values
                - param_types
                - return_type
      responses:
        '200':
          description: Task submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "running"
                  exec_id:
                    type: string
                    example: "123e4567-e89b-12d3-a456-426614174000"
        '400':
          description: Invalid input data
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error" 
  /task-status/{exec_id}:
    get:
      tags:
        - dataset
      summary: Get the status of a submitted task.
      description: Retrieve the status of a task using its execution ID.
      operationId: getTaskStatus
      parameters:
        - name: exec_id
          in: path
          description: The execution ID of the task to check status for
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Task status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "running"  
components:
  schemas:
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Dataset:
      required:
        - title
        - uploader
        - uploadDate
        - isSpatial
        - isTemporal
        - s3_location
      type: object
      properties:
        id:
          type: int
        title:
          type: string
          example: Soil Moisture Evolution in India
        description:
          type: string
          description: Text explaining what the dataset is about
        uploader:
          $ref: '#/components/schemas/User'
        uploadDate:
          type: string
          format: date-time
          description: The creation date and time in ISO 8601 format
          example: "2025-06-30T08:30:00Z"
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        isSpatial:
          type: boolean
          description: Whether the dataset has any geospatial identifiers
        isTemporal:
          type: boolean
          description: Whether the dataset has any temporal identifiers
        s3_location:
          type: string  
          description: The S3 location where the dataset is stored
          example: s3://bucket-name/path/to/dataset.csv
      xml:
        name: dataset
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          example: name@email.com
        organisation:
          type: string
      xml:
        name: user
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
